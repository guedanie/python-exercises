## Python Intro Exercises

# Identify the data types of the following values

type(99.9) == Float
type("False") == str
type(False) == bool
type('0') == str
type(0) == INT
type(True) == bool
type('True') == str
type([{}]) == list
type({'a':[]}) == dict

# What data type would best represent:
# A term or a phrase typed into a search box? A string
# if a user is logged in? a bool
# A discounted amount to apply to a user's shopping cart? Int
# Whether or not a coupon code is valid? bool
# an email address typed into a registration form? a str
# The price of a product? INT
# A matrix? a list 

# For each of the following code blocks, read the expression and predict what the result of evaluating it would be, then execute the expression

'1' + 2  #'TypeError (can't concatenate str)'
6 % 4 # Gives value that's left after diving these two values
type(6 % 4) #INT
type(type(6 % 4)) # Just returns 'type'
'3 + 4 is ' + 3 + 4 #TypeError
0 < 0 # False
'False' == False # This is False, as the first one is a string and the second is a bool
True == 'True #False
5 >= -5 # True
6 % 5 # Returns a 1
5 < 4 and 1 == 1 # False, as 5 is not less than 4
4 >= 0 and 1 !== '1' # False becasue different types
6 % 3 == 0 # True
[1] + 2 # TypeError (can't concatenate str)
[1] + [2] # Creates a list with two items
[1] * 2 # Creates a list with two [1]
[1] * [2] #Error - can't multiply lists
[] + [] == [] #True

#  Write some Python code, that is, variables and operators, to describe the following scenarios. Do not worry about the real operations to get the values, the goal of these exercises is to understand how real world conditions can be represented with code

#You have rented some movies for your kids:
#The little mermaid (for 3 days), 
#Brother Bear (for 5 days, they love it), 
#and Hercules (1 day, you don't know yet if they're going to like it). 
#If price for a movie per day is 3 dollars, how much will you have to pay?

l_cost_day = 3 * 3
b_cost_day = 3 * 5
h_cost_day = 3 * 1

total_cost = l_cost_day + b_cost_day + h_cost_day

# Suppose you're working as a contractor for 3 
#companies: Google, Amazon and Facebook, they 
#pay you a different rate per hour. 
#Google pays 400 dollars per hour, Amazon 380, and 
#Facebook 350. 
#How much will you receive in payment for this week? 
#You worked 10 hours for Facebook, 
#6 hours for Google and 4 hours for Amazon.

g_pay = 400 * 4
a_pay = 380 * 6
f_pay = 350 * 10

return sum(g_pay,a_pay,f_pay)

#A student can be enrolled to a class only if the 
#class is not full and the class schedule does 
#not conflict with her current schedule.

def student_eligible():
    if class != full AND calendar_schedule != conflict:
        True
    else:
        False

#A product offer can be applied only if people 
#buys more than 2 items, and the offer has 
#not expired. Premium members do not need to buy 
#a specific amount of products.

product_offer = (purchased_products > 2 or member_status == 'Premium') and offer_expiration > current_date


# Create a variable that holds a boolean value for each of the following conditions:

username = 'codeup'
password = 'notastrongpassword'

#the password must be at least 5 characters

password_length = len(password) > 5

#the username must be no more than 20 characters

username_len = len(username) <= 20

#the password must not be the same as the username

duplicate_checker = username != password

#bonus neither the username or password can start or end with whitespace

white_space = username[0] != ' ' and password[0] != ' '